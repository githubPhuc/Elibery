// <auto-generated />
using System;
using Elibery.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elibery.Migrations
{
    [DbContext(typeof(EliberyContext))]
    [Migration("20220609071459_migration1")]
    partial class migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Elibery.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("VaiTroId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VaiTroId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Elibery.Models.BaiGiang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MonHocId")
                        .HasColumnType("int");

                    b.Property<int>("NguoiChinhSua")
                        .HasColumnType("int");

                    b.Property<int>("NguoiChinhSuaCuoi")
                        .HasColumnType("int");

                    b.Property<bool>("PheDuyet")
                        .HasColumnType("bit");

                    b.Property<int>("idTep")
                        .HasColumnType("int");

                    b.Property<string>("tenBaiGiang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("tepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonHocId");

                    b.HasIndex("tepId");

                    b.ToTable("BaiGiang");
                });

            modelBuilder.Entity("Elibery.Models.BoMon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TenBoMon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BoMon");
                });

            modelBuilder.Entity("Elibery.Models.cauhoi", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("cauHoi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("deThiId")
                        .HasColumnType("int");

                    b.Property<string>("dokho")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idDeThi")
                        .HasColumnType("int");

                    b.Property<bool>("trangthai")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("deThiId");

                    b.ToTable("cauhoi");
                });

            modelBuilder.Entity("Elibery.Models.dapan", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("cauhoiid")
                        .HasColumnType("int");

                    b.Property<string>("dapAn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idCauhoi")
                        .HasColumnType("int");

                    b.Property<bool>("isDapan")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("cauhoiid");

                    b.ToTable("dapan");
                });

            modelBuilder.Entity("Elibery.Models.DeThi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HinhThuc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LopHocId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("datetime2");

                    b.Property<int>("NguoiPheDuyet")
                        .HasColumnType("int");

                    b.Property<bool>("PheDuyet")
                        .HasColumnType("bit");

                    b.Property<int>("TepId")
                        .HasColumnType("int");

                    b.Property<int>("ThoiLuong")
                        .HasColumnType("int");

                    b.Property<bool>("TinhTrang")
                        .HasColumnType("bit");

                    b.Property<int>("idMonHoc")
                        .HasColumnType("int");

                    b.Property<int?>("monHocId")
                        .HasColumnType("int");

                    b.Property<string>("tendethi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LopHocId");

                    b.HasIndex("TepId")
                        .IsUnique();

                    b.HasIndex("monHocId");

                    b.ToTable("DeThi");
                });

            modelBuilder.Entity("Elibery.Models.LoaiLopHoc", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("tenLoai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("trangThai")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("LoaiLopHoc");
                });

            modelBuilder.Entity("Elibery.Models.LopHoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NienKhoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenLop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("loaiId")
                        .HasColumnType("int");

                    b.Property<int>("loaiLopHocid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("loaiLopHocid");

                    b.ToTable("LopHoc");
                });

            modelBuilder.Entity("Elibery.Models.MonHoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BoMonId")
                        .HasColumnType("int");

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenMonHoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TinhTrang")
                        .HasColumnType("bit");

                    b.Property<int>("idLopHoc")
                        .HasColumnType("int");

                    b.Property<int>("lopHocIdId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoMonId");

                    b.HasIndex("lopHocIdId");

                    b.ToTable("MonHoc");
                });

            modelBuilder.Entity("Elibery.Models.PhanQuyen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TenQuyen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TrangThai")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PhanQuyen");
                });

            modelBuilder.Entity("Elibery.Models.TaiLieu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("NgayGuiPheDuyet")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PheDuyet")
                        .HasColumnType("bit");

                    b.Property<bool?>("TinhTrang")
                        .HasColumnType("bit");

                    b.Property<int?>("monhocId")
                        .HasColumnType("int");

                    b.Property<string>("tentailieu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("monhocId");

                    b.ToTable("TaiLieu");
                });

            modelBuilder.Entity("Elibery.Models.Tep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("KichThuoc")
                        .HasColumnType("int");

                    b.Property<DateTime>("NgaySuaCuoi")
                        .HasColumnType("datetime2");

                    b.Property<int>("NguoiChinhSua")
                        .HasColumnType("int");

                    b.Property<int>("TaiLieuId")
                        .HasColumnType("int");

                    b.Property<string>("TenTep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TheLoai")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idTaiLieu")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaiLieuId");

                    b.ToTable("Tep");
                });

            modelBuilder.Entity("Elibery.Models.VaiTro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MoTa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenVaiTro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThongBao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("idQuyen")
                        .HasColumnType("int");

                    b.Property<int>("phanQuyenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("phanQuyenId");

                    b.ToTable("VaiTro");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Elibery.Models.ApplicationUser", b =>
                {
                    b.HasOne("Elibery.Models.VaiTro", "VaiTro")
                        .WithMany()
                        .HasForeignKey("VaiTroId");

                    b.Navigation("VaiTro");
                });

            modelBuilder.Entity("Elibery.Models.BaiGiang", b =>
                {
                    b.HasOne("Elibery.Models.MonHoc", "MonHoc")
                        .WithMany()
                        .HasForeignKey("MonHocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elibery.Models.Tep", "tep")
                        .WithMany()
                        .HasForeignKey("tepId");

                    b.Navigation("MonHoc");

                    b.Navigation("tep");
                });

            modelBuilder.Entity("Elibery.Models.cauhoi", b =>
                {
                    b.HasOne("Elibery.Models.DeThi", "deThi")
                        .WithMany("cauhois")
                        .HasForeignKey("deThiId");

                    b.Navigation("deThi");
                });

            modelBuilder.Entity("Elibery.Models.dapan", b =>
                {
                    b.HasOne("Elibery.Models.cauhoi", "cauhoi")
                        .WithMany("dapans")
                        .HasForeignKey("cauhoiid");

                    b.Navigation("cauhoi");
                });

            modelBuilder.Entity("Elibery.Models.DeThi", b =>
                {
                    b.HasOne("Elibery.Models.ApplicationUser", null)
                        .WithMany("DeThi")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elibery.Models.LopHoc", null)
                        .WithMany("deThis")
                        .HasForeignKey("LopHocId");

                    b.HasOne("Elibery.Models.Tep", "Tep")
                        .WithOne("DeThi")
                        .HasForeignKey("Elibery.Models.DeThi", "TepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elibery.Models.MonHoc", "monHoc")
                        .WithMany("deThis")
                        .HasForeignKey("monHocId");

                    b.Navigation("Tep");

                    b.Navigation("monHoc");
                });

            modelBuilder.Entity("Elibery.Models.LopHoc", b =>
                {
                    b.HasOne("Elibery.Models.LoaiLopHoc", "loaiLopHoc")
                        .WithMany()
                        .HasForeignKey("loaiLopHocid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("loaiLopHoc");
                });

            modelBuilder.Entity("Elibery.Models.MonHoc", b =>
                {
                    b.HasOne("Elibery.Models.BoMon", "boMon")
                        .WithMany("monHocs")
                        .HasForeignKey("BoMonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elibery.Models.LopHoc", "lopHocId")
                        .WithMany("monHocs")
                        .HasForeignKey("lopHocIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("boMon");

                    b.Navigation("lopHocId");
                });

            modelBuilder.Entity("Elibery.Models.TaiLieu", b =>
                {
                    b.HasOne("Elibery.Models.ApplicationUser", null)
                        .WithMany("TaiLieu")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Elibery.Models.MonHoc", "monHoc")
                        .WithMany("taiLieus")
                        .HasForeignKey("monhocId");

                    b.Navigation("monHoc");
                });

            modelBuilder.Entity("Elibery.Models.Tep", b =>
                {
                    b.HasOne("Elibery.Models.TaiLieu", "TaiLieu")
                        .WithMany("tep")
                        .HasForeignKey("TaiLieuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaiLieu");
                });

            modelBuilder.Entity("Elibery.Models.VaiTro", b =>
                {
                    b.HasOne("Elibery.Models.PhanQuyen", "phanQuyen")
                        .WithMany()
                        .HasForeignKey("phanQuyenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("phanQuyen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Elibery.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Elibery.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Elibery.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Elibery.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elibery.Models.ApplicationUser", b =>
                {
                    b.Navigation("DeThi");

                    b.Navigation("TaiLieu");
                });

            modelBuilder.Entity("Elibery.Models.BoMon", b =>
                {
                    b.Navigation("monHocs");
                });

            modelBuilder.Entity("Elibery.Models.cauhoi", b =>
                {
                    b.Navigation("dapans");
                });

            modelBuilder.Entity("Elibery.Models.DeThi", b =>
                {
                    b.Navigation("cauhois");
                });

            modelBuilder.Entity("Elibery.Models.LopHoc", b =>
                {
                    b.Navigation("deThis");

                    b.Navigation("monHocs");
                });

            modelBuilder.Entity("Elibery.Models.MonHoc", b =>
                {
                    b.Navigation("deThis");

                    b.Navigation("taiLieus");
                });

            modelBuilder.Entity("Elibery.Models.TaiLieu", b =>
                {
                    b.Navigation("tep");
                });

            modelBuilder.Entity("Elibery.Models.Tep", b =>
                {
                    b.Navigation("DeThi")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
